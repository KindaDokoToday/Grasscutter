// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fight.proto

package io.grasscutter.net.proto.fight;

/**
 * Protobuf enum {@code ForwardType}
 */
public enum ForwardType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>ForwardType_FORWARD_LOCAL = 0;</code>
   */
  ForwardType_FORWARD_LOCAL(0),
  /**
   * <code>ForwardType_FORWARD_TO_ALL = 1;</code>
   */
  ForwardType_FORWARD_TO_ALL(1),
  /**
   * <code>ForwardType_FORWARD_TO_ALL_EXCEPT_CUR = 2;</code>
   */
  ForwardType_FORWARD_TO_ALL_EXCEPT_CUR(2),
  /**
   * <code>ForwardType_FORWARD_TO_HOST = 3;</code>
   */
  ForwardType_FORWARD_TO_HOST(3),
  /**
   * <code>ForwardType_FORWARD_TO_ALL_GUEST = 4;</code>
   */
  ForwardType_FORWARD_TO_ALL_GUEST(4),
  /**
   * <code>ForwardType_FORWARD_TO_PEER = 5;</code>
   */
  ForwardType_FORWARD_TO_PEER(5),
  /**
   * <code>ForwardType_FORWARD_TO_PEERS = 6;</code>
   */
  ForwardType_FORWARD_TO_PEERS(6),
  /**
   * <code>ForwardType_FORWARD_ONLY_SERVER = 7;</code>
   */
  ForwardType_FORWARD_ONLY_SERVER(7),
  /**
   * <code>ForwardType_FORWARD_TO_ALL_EXIST_EXCEPT_CUR = 8;</code>
   */
  ForwardType_FORWARD_TO_ALL_EXIST_EXCEPT_CUR(8),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>ForwardType_FORWARD_LOCAL = 0;</code>
   */
  public static final int ForwardType_FORWARD_LOCAL_VALUE = 0;
  /**
   * <code>ForwardType_FORWARD_TO_ALL = 1;</code>
   */
  public static final int ForwardType_FORWARD_TO_ALL_VALUE = 1;
  /**
   * <code>ForwardType_FORWARD_TO_ALL_EXCEPT_CUR = 2;</code>
   */
  public static final int ForwardType_FORWARD_TO_ALL_EXCEPT_CUR_VALUE = 2;
  /**
   * <code>ForwardType_FORWARD_TO_HOST = 3;</code>
   */
  public static final int ForwardType_FORWARD_TO_HOST_VALUE = 3;
  /**
   * <code>ForwardType_FORWARD_TO_ALL_GUEST = 4;</code>
   */
  public static final int ForwardType_FORWARD_TO_ALL_GUEST_VALUE = 4;
  /**
   * <code>ForwardType_FORWARD_TO_PEER = 5;</code>
   */
  public static final int ForwardType_FORWARD_TO_PEER_VALUE = 5;
  /**
   * <code>ForwardType_FORWARD_TO_PEERS = 6;</code>
   */
  public static final int ForwardType_FORWARD_TO_PEERS_VALUE = 6;
  /**
   * <code>ForwardType_FORWARD_ONLY_SERVER = 7;</code>
   */
  public static final int ForwardType_FORWARD_ONLY_SERVER_VALUE = 7;
  /**
   * <code>ForwardType_FORWARD_TO_ALL_EXIST_EXCEPT_CUR = 8;</code>
   */
  public static final int ForwardType_FORWARD_TO_ALL_EXIST_EXCEPT_CUR_VALUE = 8;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ForwardType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ForwardType forNumber(int value) {
    switch (value) {
      case 0: return ForwardType_FORWARD_LOCAL;
      case 1: return ForwardType_FORWARD_TO_ALL;
      case 2: return ForwardType_FORWARD_TO_ALL_EXCEPT_CUR;
      case 3: return ForwardType_FORWARD_TO_HOST;
      case 4: return ForwardType_FORWARD_TO_ALL_GUEST;
      case 5: return ForwardType_FORWARD_TO_PEER;
      case 6: return ForwardType_FORWARD_TO_PEERS;
      case 7: return ForwardType_FORWARD_ONLY_SERVER;
      case 8: return ForwardType_FORWARD_TO_ALL_EXIST_EXCEPT_CUR;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ForwardType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ForwardType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ForwardType>() {
          public ForwardType findValueByNumber(int number) {
            return ForwardType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.grasscutter.net.proto.fight.Fight.getDescriptor().getEnumTypes().get(3);
  }

  private static final ForwardType[] VALUES = values();

  public static ForwardType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ForwardType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:ForwardType)
}

